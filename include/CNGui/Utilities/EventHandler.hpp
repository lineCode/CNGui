#ifndef EVENTHANDLER_HPP
#define EVENTHANDLER_HPP

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <SFML/Window.hpp>
#include <map>

namespace CNGui
{

////////////////////////////////////////////////////////////
/// \brief Class that holds SFML events that can be useless
/// further in the code
///
////////////////////////////////////////////////////////////
class EventHandler
{
public:
    ////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ////////////////////////////////////////////////////////////
                EventHandler();

    ////////////////////////////////////////////////////////////
    /// \brief Default destructor
    ///
    ////////////////////////////////////////////////////////////
    virtual     ~EventHandler();

    ////////////////////////////////////////////////////////////
    /// \brief Returns the event associated with a given EventType
    ///
    /// \param type The EventType associated with the event
    ///
    /// \return The event associated with a given EventType
    ///
    ////////////////////////////////////////////////////////////
    sf::Event&  operator[] (const sf::Event::EventType& type);

    ////////////////////////////////////////////////////////////
    /// \brief Returns if the event associated to the given
    /// EventType is active
    ///
    /// \param type The EventType associated with the event
    ///
    /// \return Is the event active?
    ///
    ////////////////////////////////////////////////////////////
    bool        isActive(const sf::Event::EventType& type);

    ////////////////////////////////////////////////////////////
    /// \brief Insert an event to the map
    ///
    /// \param event The event to push
    ///
    ////////////////////////////////////////////////////////////
    void        push(const sf::Event& event);

    ////////////////////////////////////////////////////////////
    /// \brief Clear the event map
    ///
    ////////////////////////////////////////////////////////////
    void        clear();

protected:

private:
    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    std::map<sf::Event::EventType, sf::Event>   mEventMap;  ///< Map that holds every events

};

} // namespace CNGui

#endif // EVENTHANDLER_HPP
